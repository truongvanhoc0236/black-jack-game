import Enums

def calculate_card_value(card):
        if 0 < card % 13 < 10:
            return card % 13
        else:
            return 10

def calculate_deck_sum(deck):
        number_of_aces = 0
        deck_sum = 0
        card_value = 0
        for card in deck:
            card_value = calculate_card_value(card)
            if card_value == 1: #Ace
                number_of_aces += 1
            else:
                deck_sum += card_value
        print(deck_sum)
        deck_sum += calculate_aces_value(deck_sum, number_of_aces)
        return deck_sum

def calculate_aces_value(deck_sum, number_of_aces):
    ace_sum = 0
    while number_of_aces > 0 and deck_sum < 22 - number_of_aces:
        if (deck_sum + ace_sum + 11 + (number_of_aces - 1))< 22:
            ace_sum += 11
        elif (deck_sum + ace_sum + 10 + (number_of_aces - 1))< 22:
            ace_sum += 10
        else:
            ace_sum += 1
        number_of_aces -= 1
        print(deck_sum + ace_sum + number_of_aces)
        print("ace_sum "+str(ace_sum))
        print("number_of_aces " +str(number_of_aces))
    return ace_sum + number_of_aces

def check_deck_outcome():
        deck = [1, 10]
        size_deck = len(deck)
        outcome = Enums.Outcome.NORMAL
        if size_deck == 2:
            if deck[0] % 13 == 1 and deck[1] % 13 == 1:
                outcome = Enums.Outcome.SOFT_HAND
            elif (deck[0] % 13 == 1 and deck[1] % 13 not in range (1, 9)) or (deck[1] % 13 == 1 and deck[1] % 13 not in range (1, 9)):
                outcome = Enums.Outcome.BLACK_JACK
        else:
            sum_card = calculate_deck_sum(deck)
            if sum_card < 22 and size_deck == 5:
                outcome = Enums.Outcome.PUSH
            elif sum_card > 21:
                outcome = Enums.Outcome.BUSTING
        return outcome.value

def calculate_possibility_to_take_card(player_deck_size):
    possibility = 100
    possibility_of_player_busting = 0
    dealer_deck_sum = calculate_deck_sum([5, 4, 1])
    if dealer_deck_sum >= 15:
        possibility = (21 - dealer_deck_sum) / 13 * 100
        possibility_of_player_busting = (player_deck_size - 2) / 3 * 100
        possibility += (possibility_of_player_busting * 0.1)
    return possibility

# Make hit or stand decision
# [dealer_deck]: Deck of dealer
# [player_deck]: Deck of player
def make_hit_decision(player_deck_size):
    possibility = calculate_possibility_to_take_card(player_deck_size)
    if possibility >= 35:
        return Enums.Boolean.YES
    else:
        return Enums.Boolean.NO

from datetime import date

class Employee:
    def __init__(self, name, birth_date):
        self.name = name
        self.birth_date = birth_date

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value.upper()

    @property
    def birth_date(self):
        return self._birth_date

    @birth_date.setter
    def birth_date(self, value):
        self._birth_date = date.fromisoformat(value)

employee = Employee("Hoc", "1992-01-24")

#print(calculate_deck_sum([6, 1, 4]))

